// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gayrpc/core/gayrpc_meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto;
namespace gayrpc {
namespace core {
class RpcMeta;
class RpcMetaDefaultTypeInternal;
extern RpcMetaDefaultTypeInternal _RpcMeta_default_instance_;
class RpcMeta_MetaDataEntry_DoNotUse;
class RpcMeta_MetaDataEntry_DoNotUseDefaultTypeInternal;
extern RpcMeta_MetaDataEntry_DoNotUseDefaultTypeInternal _RpcMeta_MetaDataEntry_DoNotUse_default_instance_;
class RpcMeta_Request;
class RpcMeta_RequestDefaultTypeInternal;
extern RpcMeta_RequestDefaultTypeInternal _RpcMeta_Request_default_instance_;
class RpcMeta_Response;
class RpcMeta_ResponseDefaultTypeInternal;
extern RpcMeta_ResponseDefaultTypeInternal _RpcMeta_Response_default_instance_;
}  // namespace core
}  // namespace gayrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::gayrpc::core::RpcMeta* Arena::CreateMaybeMessage<::gayrpc::core::RpcMeta>(Arena*);
template<> ::gayrpc::core::RpcMeta_MetaDataEntry_DoNotUse* Arena::CreateMaybeMessage<::gayrpc::core::RpcMeta_MetaDataEntry_DoNotUse>(Arena*);
template<> ::gayrpc::core::RpcMeta_Request* Arena::CreateMaybeMessage<::gayrpc::core::RpcMeta_Request>(Arena*);
template<> ::gayrpc::core::RpcMeta_Response* Arena::CreateMaybeMessage<::gayrpc::core::RpcMeta_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gayrpc {
namespace core {

enum RpcMeta_Type : int {
  RpcMeta_Type_REQUEST = 0,
  RpcMeta_Type_RESPONSE = 1,
  RpcMeta_Type_RpcMeta_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RpcMeta_Type_RpcMeta_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RpcMeta_Type_IsValid(int value);
constexpr RpcMeta_Type RpcMeta_Type_Type_MIN = RpcMeta_Type_REQUEST;
constexpr RpcMeta_Type RpcMeta_Type_Type_MAX = RpcMeta_Type_RESPONSE;
constexpr int RpcMeta_Type_Type_ARRAYSIZE = RpcMeta_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcMeta_Type_descriptor();
template<typename T>
inline const std::string& RpcMeta_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcMeta_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcMeta_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcMeta_Type_descriptor(), enum_t_value);
}
inline bool RpcMeta_Type_Parse(
    const std::string& name, RpcMeta_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcMeta_Type>(
    RpcMeta_Type_descriptor(), name, value);
}
enum RpcMeta_DataEncodingType : int {
  RpcMeta_DataEncodingType_BINARY = 0,
  RpcMeta_DataEncodingType_JSON = 1,
  RpcMeta_DataEncodingType_RpcMeta_DataEncodingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RpcMeta_DataEncodingType_RpcMeta_DataEncodingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RpcMeta_DataEncodingType_IsValid(int value);
constexpr RpcMeta_DataEncodingType RpcMeta_DataEncodingType_DataEncodingType_MIN = RpcMeta_DataEncodingType_BINARY;
constexpr RpcMeta_DataEncodingType RpcMeta_DataEncodingType_DataEncodingType_MAX = RpcMeta_DataEncodingType_JSON;
constexpr int RpcMeta_DataEncodingType_DataEncodingType_ARRAYSIZE = RpcMeta_DataEncodingType_DataEncodingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcMeta_DataEncodingType_descriptor();
template<typename T>
inline const std::string& RpcMeta_DataEncodingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcMeta_DataEncodingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcMeta_DataEncodingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcMeta_DataEncodingType_descriptor(), enum_t_value);
}
inline bool RpcMeta_DataEncodingType_Parse(
    const std::string& name, RpcMeta_DataEncodingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcMeta_DataEncodingType>(
    RpcMeta_DataEncodingType_descriptor(), name, value);
}
// ===================================================================

class RpcMeta_Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gayrpc.core.RpcMeta.Request) */ {
 public:
  RpcMeta_Request();
  virtual ~RpcMeta_Request();

  RpcMeta_Request(const RpcMeta_Request& from);
  RpcMeta_Request(RpcMeta_Request&& from) noexcept
    : RpcMeta_Request() {
    *this = ::std::move(from);
  }

  inline RpcMeta_Request& operator=(const RpcMeta_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMeta_Request& operator=(RpcMeta_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcMeta_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcMeta_Request* internal_default_instance() {
    return reinterpret_cast<const RpcMeta_Request*>(
               &_RpcMeta_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcMeta_Request& a, RpcMeta_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMeta_Request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RpcMeta_Request* New() const final {
    return CreateMaybeMessage<RpcMeta_Request>(nullptr);
  }

  RpcMeta_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcMeta_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcMeta_Request& from);
  void MergeFrom(const RpcMeta_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMeta_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gayrpc.core.RpcMeta.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto);
    return ::descriptor_table_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrMethodFieldNumber = 2,
    kIntMethodFieldNumber = 1,
    kSequenceIdFieldNumber = 4,
    kTimeoutFieldNumber = 5,
    kExpectResponseFieldNumber = 3,
  };
  // string strMethod = 2;
  void clear_strmethod();
  const std::string& strmethod() const;
  void set_strmethod(const std::string& value);
  void set_strmethod(std::string&& value);
  void set_strmethod(const char* value);
  void set_strmethod(const char* value, size_t size);
  std::string* mutable_strmethod();
  std::string* release_strmethod();
  void set_allocated_strmethod(std::string* strmethod);
  private:
  const std::string& _internal_strmethod() const;
  void _internal_set_strmethod(const std::string& value);
  std::string* _internal_mutable_strmethod();
  public:

  // uint64 intMethod = 1;
  void clear_intmethod();
  ::PROTOBUF_NAMESPACE_ID::uint64 intmethod() const;
  void set_intmethod(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_intmethod() const;
  void _internal_set_intmethod(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 sequence_id = 4;
  void clear_sequence_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_id() const;
  void set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence_id() const;
  void _internal_set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timeout = 5;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool expect_response = 3;
  void clear_expect_response();
  bool expect_response() const;
  void set_expect_response(bool value);
  private:
  bool _internal_expect_response() const;
  void _internal_set_expect_response(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gayrpc.core.RpcMeta.Request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strmethod_;
  ::PROTOBUF_NAMESPACE_ID::uint64 intmethod_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout_;
  bool expect_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class RpcMeta_Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gayrpc.core.RpcMeta.Response) */ {
 public:
  RpcMeta_Response();
  virtual ~RpcMeta_Response();

  RpcMeta_Response(const RpcMeta_Response& from);
  RpcMeta_Response(RpcMeta_Response&& from) noexcept
    : RpcMeta_Response() {
    *this = ::std::move(from);
  }

  inline RpcMeta_Response& operator=(const RpcMeta_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMeta_Response& operator=(RpcMeta_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcMeta_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcMeta_Response* internal_default_instance() {
    return reinterpret_cast<const RpcMeta_Response*>(
               &_RpcMeta_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcMeta_Response& a, RpcMeta_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMeta_Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RpcMeta_Response* New() const final {
    return CreateMaybeMessage<RpcMeta_Response>(nullptr);
  }

  RpcMeta_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcMeta_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcMeta_Response& from);
  void MergeFrom(const RpcMeta_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMeta_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gayrpc.core.RpcMeta.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto);
    return ::descriptor_table_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 4,
    kSequenceIdFieldNumber = 1,
    kErrorCodeFieldNumber = 3,
    kFailedFieldNumber = 2,
    kTimeoutFieldNumber = 5,
  };
  // string reason = 4;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint64 sequence_id = 1;
  void clear_sequence_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_id() const;
  void set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence_id() const;
  void _internal_set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 error_code = 3;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool failed = 2;
  void clear_failed();
  bool failed() const;
  void set_failed(bool value);
  private:
  bool _internal_failed() const;
  void _internal_set_failed(bool value);
  public:

  // bool timeout = 5;
  void clear_timeout();
  bool timeout() const;
  void set_timeout(bool value);
  private:
  bool _internal_timeout() const;
  void _internal_set_timeout(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gayrpc.core.RpcMeta.Response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  bool failed_;
  bool timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class RpcMeta_MetaDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RpcMeta_MetaDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RpcMeta_MetaDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RpcMeta_MetaDataEntry_DoNotUse();
  RpcMeta_MetaDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RpcMeta_MetaDataEntry_DoNotUse& other);
  static const RpcMeta_MetaDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RpcMeta_MetaDataEntry_DoNotUse*>(&_RpcMeta_MetaDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "gayrpc.core.RpcMeta.MetaDataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "gayrpc.core.RpcMeta.MetaDataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto);
    return ::descriptor_table_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class RpcMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gayrpc.core.RpcMeta) */ {
 public:
  RpcMeta();
  virtual ~RpcMeta();

  RpcMeta(const RpcMeta& from);
  RpcMeta(RpcMeta&& from) noexcept
    : RpcMeta() {
    *this = ::std::move(from);
  }

  inline RpcMeta& operator=(const RpcMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMeta& operator=(RpcMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcMeta* internal_default_instance() {
    return reinterpret_cast<const RpcMeta*>(
               &_RpcMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RpcMeta& a, RpcMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RpcMeta* New() const final {
    return CreateMaybeMessage<RpcMeta>(nullptr);
  }

  RpcMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcMeta& from);
  void MergeFrom(const RpcMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gayrpc.core.RpcMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto);
    return ::descriptor_table_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RpcMeta_Request Request;
  typedef RpcMeta_Response Response;

  typedef RpcMeta_Type Type;
  static constexpr Type REQUEST =
    RpcMeta_Type_REQUEST;
  static constexpr Type RESPONSE =
    RpcMeta_Type_RESPONSE;
  static inline bool Type_IsValid(int value) {
    return RpcMeta_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    RpcMeta_Type_Type_MIN;
  static constexpr Type Type_MAX =
    RpcMeta_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    RpcMeta_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return RpcMeta_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return RpcMeta_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return RpcMeta_Type_Parse(name, value);
  }

  typedef RpcMeta_DataEncodingType DataEncodingType;
  static constexpr DataEncodingType BINARY =
    RpcMeta_DataEncodingType_BINARY;
  static constexpr DataEncodingType JSON =
    RpcMeta_DataEncodingType_JSON;
  static inline bool DataEncodingType_IsValid(int value) {
    return RpcMeta_DataEncodingType_IsValid(value);
  }
  static constexpr DataEncodingType DataEncodingType_MIN =
    RpcMeta_DataEncodingType_DataEncodingType_MIN;
  static constexpr DataEncodingType DataEncodingType_MAX =
    RpcMeta_DataEncodingType_DataEncodingType_MAX;
  static constexpr int DataEncodingType_ARRAYSIZE =
    RpcMeta_DataEncodingType_DataEncodingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataEncodingType_descriptor() {
    return RpcMeta_DataEncodingType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataEncodingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataEncodingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataEncodingType_Name.");
    return RpcMeta_DataEncodingType_Name(enum_t_value);
  }
  static inline bool DataEncodingType_Parse(const std::string& name,
      DataEncodingType* value) {
    return RpcMeta_DataEncodingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMetaDataFieldNumber = 6,
    kRequestInfoFieldNumber = 4,
    kResponseInfoFieldNumber = 5,
    kTypeFieldNumber = 1,
    kServiceIdFieldNumber = 2,
    kEncodingFieldNumber = 3,
  };
  // map<string, string> meta_data = 6;
  int meta_data_size() const;
  private:
  int _internal_meta_data_size() const;
  public:
  void clear_meta_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_meta_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_meta_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      meta_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_meta_data();

  // .gayrpc.core.RpcMeta.Request request_info = 4;
  bool has_request_info() const;
  private:
  bool _internal_has_request_info() const;
  public:
  void clear_request_info();
  const ::gayrpc::core::RpcMeta_Request& request_info() const;
  ::gayrpc::core::RpcMeta_Request* release_request_info();
  ::gayrpc::core::RpcMeta_Request* mutable_request_info();
  void set_allocated_request_info(::gayrpc::core::RpcMeta_Request* request_info);
  private:
  const ::gayrpc::core::RpcMeta_Request& _internal_request_info() const;
  ::gayrpc::core::RpcMeta_Request* _internal_mutable_request_info();
  public:

  // .gayrpc.core.RpcMeta.Response response_info = 5;
  bool has_response_info() const;
  private:
  bool _internal_has_response_info() const;
  public:
  void clear_response_info();
  const ::gayrpc::core::RpcMeta_Response& response_info() const;
  ::gayrpc::core::RpcMeta_Response* release_response_info();
  ::gayrpc::core::RpcMeta_Response* mutable_response_info();
  void set_allocated_response_info(::gayrpc::core::RpcMeta_Response* response_info);
  private:
  const ::gayrpc::core::RpcMeta_Response& _internal_response_info() const;
  ::gayrpc::core::RpcMeta_Response* _internal_mutable_response_info();
  public:

  // .gayrpc.core.RpcMeta.Type type = 1;
  void clear_type();
  ::gayrpc::core::RpcMeta_Type type() const;
  void set_type(::gayrpc::core::RpcMeta_Type value);
  private:
  ::gayrpc::core::RpcMeta_Type _internal_type() const;
  void _internal_set_type(::gayrpc::core::RpcMeta_Type value);
  public:

  // uint32 service_id = 2;
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .gayrpc.core.RpcMeta.DataEncodingType encoding = 3;
  void clear_encoding();
  ::gayrpc::core::RpcMeta_DataEncodingType encoding() const;
  void set_encoding(::gayrpc::core::RpcMeta_DataEncodingType value);
  private:
  ::gayrpc::core::RpcMeta_DataEncodingType _internal_encoding() const;
  void _internal_set_encoding(::gayrpc::core::RpcMeta_DataEncodingType value);
  public:

  // @@protoc_insertion_point(class_scope:gayrpc.core.RpcMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RpcMeta_MetaDataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > meta_data_;
  ::gayrpc::core::RpcMeta_Request* request_info_;
  ::gayrpc::core::RpcMeta_Response* response_info_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  int encoding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcMeta_Request

// uint64 intMethod = 1;
inline void RpcMeta_Request::clear_intmethod() {
  intmethod_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcMeta_Request::_internal_intmethod() const {
  return intmethod_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcMeta_Request::intmethod() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.Request.intMethod)
  return _internal_intmethod();
}
inline void RpcMeta_Request::_internal_set_intmethod(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  intmethod_ = value;
}
inline void RpcMeta_Request::set_intmethod(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_intmethod(value);
  // @@protoc_insertion_point(field_set:gayrpc.core.RpcMeta.Request.intMethod)
}

// string strMethod = 2;
inline void RpcMeta_Request::clear_strmethod() {
  strmethod_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RpcMeta_Request::strmethod() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.Request.strMethod)
  return _internal_strmethod();
}
inline void RpcMeta_Request::set_strmethod(const std::string& value) {
  _internal_set_strmethod(value);
  // @@protoc_insertion_point(field_set:gayrpc.core.RpcMeta.Request.strMethod)
}
inline std::string* RpcMeta_Request::mutable_strmethod() {
  // @@protoc_insertion_point(field_mutable:gayrpc.core.RpcMeta.Request.strMethod)
  return _internal_mutable_strmethod();
}
inline const std::string& RpcMeta_Request::_internal_strmethod() const {
  return strmethod_.GetNoArena();
}
inline void RpcMeta_Request::_internal_set_strmethod(const std::string& value) {
  
  strmethod_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RpcMeta_Request::set_strmethod(std::string&& value) {
  
  strmethod_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gayrpc.core.RpcMeta.Request.strMethod)
}
inline void RpcMeta_Request::set_strmethod(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strmethod_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gayrpc.core.RpcMeta.Request.strMethod)
}
inline void RpcMeta_Request::set_strmethod(const char* value, size_t size) {
  
  strmethod_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gayrpc.core.RpcMeta.Request.strMethod)
}
inline std::string* RpcMeta_Request::_internal_mutable_strmethod() {
  
  return strmethod_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RpcMeta_Request::release_strmethod() {
  // @@protoc_insertion_point(field_release:gayrpc.core.RpcMeta.Request.strMethod)
  
  return strmethod_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RpcMeta_Request::set_allocated_strmethod(std::string* strmethod) {
  if (strmethod != nullptr) {
    
  } else {
    
  }
  strmethod_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strmethod);
  // @@protoc_insertion_point(field_set_allocated:gayrpc.core.RpcMeta.Request.strMethod)
}

// bool expect_response = 3;
inline void RpcMeta_Request::clear_expect_response() {
  expect_response_ = false;
}
inline bool RpcMeta_Request::_internal_expect_response() const {
  return expect_response_;
}
inline bool RpcMeta_Request::expect_response() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.Request.expect_response)
  return _internal_expect_response();
}
inline void RpcMeta_Request::_internal_set_expect_response(bool value) {
  
  expect_response_ = value;
}
inline void RpcMeta_Request::set_expect_response(bool value) {
  _internal_set_expect_response(value);
  // @@protoc_insertion_point(field_set:gayrpc.core.RpcMeta.Request.expect_response)
}

// uint64 sequence_id = 4;
inline void RpcMeta_Request::clear_sequence_id() {
  sequence_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcMeta_Request::_internal_sequence_id() const {
  return sequence_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcMeta_Request::sequence_id() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.Request.sequence_id)
  return _internal_sequence_id();
}
inline void RpcMeta_Request::_internal_set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_id_ = value;
}
inline void RpcMeta_Request::set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:gayrpc.core.RpcMeta.Request.sequence_id)
}

// uint64 timeout = 5;
inline void RpcMeta_Request::clear_timeout() {
  timeout_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcMeta_Request::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcMeta_Request::timeout() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.Request.timeout)
  return _internal_timeout();
}
inline void RpcMeta_Request::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timeout_ = value;
}
inline void RpcMeta_Request::set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:gayrpc.core.RpcMeta.Request.timeout)
}

// -------------------------------------------------------------------

// RpcMeta_Response

// uint64 sequence_id = 1;
inline void RpcMeta_Response::clear_sequence_id() {
  sequence_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcMeta_Response::_internal_sequence_id() const {
  return sequence_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcMeta_Response::sequence_id() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.Response.sequence_id)
  return _internal_sequence_id();
}
inline void RpcMeta_Response::_internal_set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_id_ = value;
}
inline void RpcMeta_Response::set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:gayrpc.core.RpcMeta.Response.sequence_id)
}

// bool failed = 2;
inline void RpcMeta_Response::clear_failed() {
  failed_ = false;
}
inline bool RpcMeta_Response::_internal_failed() const {
  return failed_;
}
inline bool RpcMeta_Response::failed() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.Response.failed)
  return _internal_failed();
}
inline void RpcMeta_Response::_internal_set_failed(bool value) {
  
  failed_ = value;
}
inline void RpcMeta_Response::set_failed(bool value) {
  _internal_set_failed(value);
  // @@protoc_insertion_point(field_set:gayrpc.core.RpcMeta.Response.failed)
}

// int32 error_code = 3;
inline void RpcMeta_Response::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcMeta_Response::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcMeta_Response::error_code() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.Response.error_code)
  return _internal_error_code();
}
inline void RpcMeta_Response::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void RpcMeta_Response::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:gayrpc.core.RpcMeta.Response.error_code)
}

// string reason = 4;
inline void RpcMeta_Response::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RpcMeta_Response::reason() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.Response.reason)
  return _internal_reason();
}
inline void RpcMeta_Response::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:gayrpc.core.RpcMeta.Response.reason)
}
inline std::string* RpcMeta_Response::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:gayrpc.core.RpcMeta.Response.reason)
  return _internal_mutable_reason();
}
inline const std::string& RpcMeta_Response::_internal_reason() const {
  return reason_.GetNoArena();
}
inline void RpcMeta_Response::_internal_set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RpcMeta_Response::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gayrpc.core.RpcMeta.Response.reason)
}
inline void RpcMeta_Response::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gayrpc.core.RpcMeta.Response.reason)
}
inline void RpcMeta_Response::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gayrpc.core.RpcMeta.Response.reason)
}
inline std::string* RpcMeta_Response::_internal_mutable_reason() {
  
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RpcMeta_Response::release_reason() {
  // @@protoc_insertion_point(field_release:gayrpc.core.RpcMeta.Response.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RpcMeta_Response::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:gayrpc.core.RpcMeta.Response.reason)
}

// bool timeout = 5;
inline void RpcMeta_Response::clear_timeout() {
  timeout_ = false;
}
inline bool RpcMeta_Response::_internal_timeout() const {
  return timeout_;
}
inline bool RpcMeta_Response::timeout() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.Response.timeout)
  return _internal_timeout();
}
inline void RpcMeta_Response::_internal_set_timeout(bool value) {
  
  timeout_ = value;
}
inline void RpcMeta_Response::set_timeout(bool value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:gayrpc.core.RpcMeta.Response.timeout)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RpcMeta

// .gayrpc.core.RpcMeta.Type type = 1;
inline void RpcMeta::clear_type() {
  type_ = 0;
}
inline ::gayrpc::core::RpcMeta_Type RpcMeta::_internal_type() const {
  return static_cast< ::gayrpc::core::RpcMeta_Type >(type_);
}
inline ::gayrpc::core::RpcMeta_Type RpcMeta::type() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.type)
  return _internal_type();
}
inline void RpcMeta::_internal_set_type(::gayrpc::core::RpcMeta_Type value) {
  
  type_ = value;
}
inline void RpcMeta::set_type(::gayrpc::core::RpcMeta_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gayrpc.core.RpcMeta.type)
}

// uint32 service_id = 2;
inline void RpcMeta::clear_service_id() {
  service_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RpcMeta::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RpcMeta::service_id() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.service_id)
  return _internal_service_id();
}
inline void RpcMeta::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  service_id_ = value;
}
inline void RpcMeta::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:gayrpc.core.RpcMeta.service_id)
}

// .gayrpc.core.RpcMeta.DataEncodingType encoding = 3;
inline void RpcMeta::clear_encoding() {
  encoding_ = 0;
}
inline ::gayrpc::core::RpcMeta_DataEncodingType RpcMeta::_internal_encoding() const {
  return static_cast< ::gayrpc::core::RpcMeta_DataEncodingType >(encoding_);
}
inline ::gayrpc::core::RpcMeta_DataEncodingType RpcMeta::encoding() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.encoding)
  return _internal_encoding();
}
inline void RpcMeta::_internal_set_encoding(::gayrpc::core::RpcMeta_DataEncodingType value) {
  
  encoding_ = value;
}
inline void RpcMeta::set_encoding(::gayrpc::core::RpcMeta_DataEncodingType value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:gayrpc.core.RpcMeta.encoding)
}

// .gayrpc.core.RpcMeta.Request request_info = 4;
inline bool RpcMeta::_internal_has_request_info() const {
  return this != internal_default_instance() && request_info_ != nullptr;
}
inline bool RpcMeta::has_request_info() const {
  return _internal_has_request_info();
}
inline void RpcMeta::clear_request_info() {
  if (GetArenaNoVirtual() == nullptr && request_info_ != nullptr) {
    delete request_info_;
  }
  request_info_ = nullptr;
}
inline const ::gayrpc::core::RpcMeta_Request& RpcMeta::_internal_request_info() const {
  const ::gayrpc::core::RpcMeta_Request* p = request_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gayrpc::core::RpcMeta_Request*>(
      &::gayrpc::core::_RpcMeta_Request_default_instance_);
}
inline const ::gayrpc::core::RpcMeta_Request& RpcMeta::request_info() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.request_info)
  return _internal_request_info();
}
inline ::gayrpc::core::RpcMeta_Request* RpcMeta::release_request_info() {
  // @@protoc_insertion_point(field_release:gayrpc.core.RpcMeta.request_info)
  
  ::gayrpc::core::RpcMeta_Request* temp = request_info_;
  request_info_ = nullptr;
  return temp;
}
inline ::gayrpc::core::RpcMeta_Request* RpcMeta::_internal_mutable_request_info() {
  
  if (request_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::gayrpc::core::RpcMeta_Request>(GetArenaNoVirtual());
    request_info_ = p;
  }
  return request_info_;
}
inline ::gayrpc::core::RpcMeta_Request* RpcMeta::mutable_request_info() {
  // @@protoc_insertion_point(field_mutable:gayrpc.core.RpcMeta.request_info)
  return _internal_mutable_request_info();
}
inline void RpcMeta::set_allocated_request_info(::gayrpc::core::RpcMeta_Request* request_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_info_;
  }
  if (request_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_info, submessage_arena);
    }
    
  } else {
    
  }
  request_info_ = request_info;
  // @@protoc_insertion_point(field_set_allocated:gayrpc.core.RpcMeta.request_info)
}

// .gayrpc.core.RpcMeta.Response response_info = 5;
inline bool RpcMeta::_internal_has_response_info() const {
  return this != internal_default_instance() && response_info_ != nullptr;
}
inline bool RpcMeta::has_response_info() const {
  return _internal_has_response_info();
}
inline void RpcMeta::clear_response_info() {
  if (GetArenaNoVirtual() == nullptr && response_info_ != nullptr) {
    delete response_info_;
  }
  response_info_ = nullptr;
}
inline const ::gayrpc::core::RpcMeta_Response& RpcMeta::_internal_response_info() const {
  const ::gayrpc::core::RpcMeta_Response* p = response_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gayrpc::core::RpcMeta_Response*>(
      &::gayrpc::core::_RpcMeta_Response_default_instance_);
}
inline const ::gayrpc::core::RpcMeta_Response& RpcMeta::response_info() const {
  // @@protoc_insertion_point(field_get:gayrpc.core.RpcMeta.response_info)
  return _internal_response_info();
}
inline ::gayrpc::core::RpcMeta_Response* RpcMeta::release_response_info() {
  // @@protoc_insertion_point(field_release:gayrpc.core.RpcMeta.response_info)
  
  ::gayrpc::core::RpcMeta_Response* temp = response_info_;
  response_info_ = nullptr;
  return temp;
}
inline ::gayrpc::core::RpcMeta_Response* RpcMeta::_internal_mutable_response_info() {
  
  if (response_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::gayrpc::core::RpcMeta_Response>(GetArenaNoVirtual());
    response_info_ = p;
  }
  return response_info_;
}
inline ::gayrpc::core::RpcMeta_Response* RpcMeta::mutable_response_info() {
  // @@protoc_insertion_point(field_mutable:gayrpc.core.RpcMeta.response_info)
  return _internal_mutable_response_info();
}
inline void RpcMeta::set_allocated_response_info(::gayrpc::core::RpcMeta_Response* response_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete response_info_;
  }
  if (response_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_info, submessage_arena);
    }
    
  } else {
    
  }
  response_info_ = response_info;
  // @@protoc_insertion_point(field_set_allocated:gayrpc.core.RpcMeta.response_info)
}

// map<string, string> meta_data = 6;
inline int RpcMeta::_internal_meta_data_size() const {
  return meta_data_.size();
}
inline int RpcMeta::meta_data_size() const {
  return _internal_meta_data_size();
}
inline void RpcMeta::clear_meta_data() {
  meta_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RpcMeta::_internal_meta_data() const {
  return meta_data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RpcMeta::meta_data() const {
  // @@protoc_insertion_point(field_map:gayrpc.core.RpcMeta.meta_data)
  return _internal_meta_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RpcMeta::_internal_mutable_meta_data() {
  return meta_data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RpcMeta::mutable_meta_data() {
  // @@protoc_insertion_point(field_mutable_map:gayrpc.core.RpcMeta.meta_data)
  return _internal_mutable_meta_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace gayrpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gayrpc::core::RpcMeta_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gayrpc::core::RpcMeta_Type>() {
  return ::gayrpc::core::RpcMeta_Type_descriptor();
}
template <> struct is_proto_enum< ::gayrpc::core::RpcMeta_DataEncodingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gayrpc::core::RpcMeta_DataEncodingType>() {
  return ::gayrpc::core::RpcMeta_DataEncodingType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gayrpc_2fcore_2fgayrpc_5fmeta_2eproto
